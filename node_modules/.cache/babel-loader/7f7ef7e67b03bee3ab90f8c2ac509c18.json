{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rohit\\\\OneDrive\\\\MSCS\\\\Fall2019\\\\CS6630 Vis. for Data Science\\\\datavis-fifa20-dashboard\\\\src\\\\radarPlot.js\";\nimport React, { Component } from \"react\";\nimport Radar from \"react-d3-radar\";\n\nclass RadarPlot extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPlayer = playerNo => {\n      if (playerNo == 1) {\n        return this.props.player1 === undefined ? \" \" : this.props.player1.Name;\n      } else if (playerNo == 2) {\n        return this.props.player2 === undefined ? \" \" : this.props.player2.Name;\n      }\n    };\n\n    this.displayRadarPlot = () => {\n      if (this.state.player1 != undefined) {\n        return React.createElement(Radar, {\n          width: 500,\n          height: 500,\n          padding: 70,\n          domainMax: 100,\n          highlighted: null,\n          onHover: point => {\n            if (point) {\n              console.log(\"hovered over a data point\");\n            } else {\n              console.log(\"not over anything\");\n            }\n          },\n          data: this.state.plot_points,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.state = {\n      player1: undefined,\n      player2: undefined,\n      plot_points: {}\n    };\n    this.gk_skills = [\"Goalkeeping\", \"GK Diving\", \"GK Handling\", \"GK Kicking\", \"GK Positioning\", \"GK Reflexes\"];\n    this.def_skills = [\"Interceptions\", \"Marking\", \"Standing Tackle\", \"Sliding Tackle\", \"Strength\", \"Jumpimg\"];\n    this.mid_skills = [\"Short Passing\", \"Long Passing\", \"Ball Control\", \"Crossing\", \"Sprint Speed\", \"Vision\"];\n    this.att_skills = [\"Finishing\", \"Long Shots\", \"Positioning\", \"Shot Power\", \"Volleys\", \"Penalties\"];\n    this.position = {\n      GK: \"GK\",\n      CB: \"DEF\",\n      LB: \"DEF\",\n      RB: \"DEF\",\n      LWB: \"DEF\",\n      RWB: \"DEF\",\n      CDM: \"MID\",\n      CM: \"MID\",\n      CAM: \"MID\",\n      LM: \"MID\",\n      RM: \"MID\",\n      LW: \"MID\",\n      RW: \"MID\",\n      CF: \"ATT\",\n      ST: \"ATT\"\n    };\n    this.skills = {\n      GK: this.gk_skills,\n      DEF: this.def_skills,\n      MID: this.mid_skills,\n      ATT: this.att_skills\n    };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps, prevState) {\n    let curr_plot_points = this.state.plot_points;\n\n    if (prevProps.player1 !== this.props.player1) {\n      //select attributes by position of player1\n      const attr = this.skills[this.position[this.props.player1.BP]]; //populate attribute names\n\n      const attr_names = attr.map(d => {\n        return {\n          key: \"point\" + attr.indexOf(d),\n          label: d\n        };\n      }); //populate attribute values for player 1\n\n      let attr_values1 = {};\n      attr.map(d => {\n        attr_values1[\"point\" + attr.indexOf(d)] = this.props.player1[d];\n      }); //populate attribute values for player 2\n\n      let attr_values2 = {};\n      attr.map(d => {\n        attr_values2[\"point\" + attr.indexOf(d)] = this.props.player2[d];\n      });\n      curr_plot_points = {\n        variables: attr_names,\n        sets: [{\n          key: \"player1\",\n          label: \"Player1 Attributes\",\n          values: attr_values1\n        }, {\n          key: \"player2\",\n          label: \"Player2 Attributes\",\n          values: attr_values2\n        }]\n      };\n      this.setState({\n        player1: this.props.player1,\n        plot_points: curr_plot_points\n      });\n    }\n\n    if (prevProps.player2 !== this.props.player2) {\n      if (prevProps.player1 == this.props.player1) {\n        const attr = curr_plot_points.variables.map(d => {\n          return d.label;\n        }); //populate attribute values for player 2\n\n        let attr_values2 = {};\n        attr.map(d => {\n          attr_values2[\"point\" + attr.indexOf(d)] = this.props.player2[d];\n        });\n        curr_plot_points.sets[1].values = attr_values2;\n        this.setState({\n          plot_points: curr_plot_points\n        });\n      }\n\n      this.setState({\n        player2: this.props.player2\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, this.displayRadarPlot());\n  }\n\n}\n\nexport default RadarPlot;","map":{"version":3,"sources":["C:/Users/rohit/OneDrive/MSCS/Fall2019/CS6630 Vis. for Data Science/datavis-fifa20-dashboard/src/radarPlot.js"],"names":["React","Component","Radar","RadarPlot","constructor","props","getPlayer","playerNo","player1","undefined","Name","player2","displayRadarPlot","state","point","console","log","plot_points","gk_skills","def_skills","mid_skills","att_skills","position","GK","CB","LB","RB","LWB","RWB","CDM","CM","CAM","LM","RM","LW","RW","CF","ST","skills","DEF","MID","ATT","componentDidMount","componentDidUpdate","prevProps","prevState","curr_plot_points","attr","BP","attr_names","map","d","key","indexOf","label","attr_values1","attr_values2","variables","sets","values","setState","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Radar from \"react-d3-radar\";\r\n\r\nclass RadarPlot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      player1: undefined,\r\n      player2: undefined,\r\n      plot_points: {}\r\n    };\r\n    this.gk_skills = [\r\n      \"Goalkeeping\",\r\n      \"GK Diving\",\r\n      \"GK Handling\",\r\n      \"GK Kicking\",\r\n      \"GK Positioning\",\r\n      \"GK Reflexes\"\r\n    ];\r\n    this.def_skills = [\r\n      \"Interceptions\",\r\n      \"Marking\",\r\n      \"Standing Tackle\",\r\n      \"Sliding Tackle\",\r\n      \"Strength\",\r\n      \"Jumpimg\"\r\n    ];\r\n    this.mid_skills = [\r\n      \"Short Passing\",\r\n      \"Long Passing\",\r\n      \"Ball Control\",\r\n      \"Crossing\",\r\n      \"Sprint Speed\",\r\n      \"Vision\"\r\n    ];\r\n    this.att_skills = [\r\n      \"Finishing\",\r\n      \"Long Shots\",\r\n      \"Positioning\",\r\n      \"Shot Power\",\r\n      \"Volleys\",\r\n      \"Penalties\"\r\n    ];\r\n    this.position = {\r\n      GK: \"GK\",\r\n      CB: \"DEF\",\r\n      LB: \"DEF\",\r\n      RB: \"DEF\",\r\n      LWB: \"DEF\",\r\n      RWB: \"DEF\",\r\n      CDM: \"MID\",\r\n      CM: \"MID\",\r\n      CAM: \"MID\",\r\n      LM: \"MID\",\r\n      RM: \"MID\",\r\n      LW: \"MID\",\r\n      RW: \"MID\",\r\n      CF: \"ATT\",\r\n      ST: \"ATT\"\r\n    };\r\n    this.skills = {\r\n      GK: this.gk_skills,\r\n      DEF: this.def_skills,\r\n      MID: this.mid_skills,\r\n      ATT: this.att_skills\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    let curr_plot_points = this.state.plot_points;\r\n\r\n    if (prevProps.player1 !== this.props.player1) {\r\n      //select attributes by position of player1\r\n      const attr = this.skills[this.position[this.props.player1.BP]];\r\n\r\n      //populate attribute names\r\n      const attr_names = attr.map(d => {\r\n        return { key: \"point\" + attr.indexOf(d), label: d };\r\n      });\r\n\r\n      //populate attribute values for player 1\r\n      let attr_values1 = {};\r\n      attr.map(d => {\r\n        attr_values1[\"point\" + attr.indexOf(d)] = this.props.player1[d];\r\n      });\r\n\r\n      //populate attribute values for player 2\r\n      let attr_values2 = {};\r\n      attr.map(d => {\r\n        attr_values2[\"point\" + attr.indexOf(d)] = this.props.player2[d];\r\n      });\r\n\r\n      curr_plot_points = {\r\n        variables: attr_names,\r\n        sets: [\r\n          { key: \"player1\", label: \"Player1 Attributes\", values: attr_values1 },\r\n          { key: \"player2\", label: \"Player2 Attributes\", values: attr_values2 }\r\n        ]\r\n      };\r\n\r\n      this.setState({\r\n        player1: this.props.player1,\r\n        plot_points: curr_plot_points\r\n      });\r\n    }\r\n\r\n    if (prevProps.player2 !== this.props.player2) {\r\n      if (prevProps.player1 == this.props.player1) {\r\n        const attr = curr_plot_points.variables.map(d => {\r\n          return d.label;\r\n        });\r\n\r\n        //populate attribute values for player 2\r\n        let attr_values2 = {};\r\n        attr.map(d => {\r\n          attr_values2[\"point\" + attr.indexOf(d)] = this.props.player2[d];\r\n        });\r\n\r\n        curr_plot_points.sets[1].values = attr_values2;\r\n        this.setState({\r\n          plot_points: curr_plot_points\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        player2: this.props.player2\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    return <div>{this.displayRadarPlot()}</div>;\r\n  }\r\n\r\n  getPlayer = playerNo => {\r\n    if (playerNo == 1) {\r\n      return this.props.player1 === undefined ? \" \" : this.props.player1.Name;\r\n    } else if (playerNo == 2) {\r\n      return this.props.player2 === undefined ? \" \" : this.props.player2.Name;\r\n    }\r\n  };\r\n\r\n  displayRadarPlot = () => {\r\n    if (this.state.player1 != undefined) {\r\n      return (\r\n        <Radar\r\n          width={500}\r\n          height={500}\r\n          padding={70}\r\n          domainMax={100}\r\n          highlighted={null}\r\n          onHover={point => {\r\n            if (point) {\r\n              console.log(\"hovered over a data point\");\r\n            } else {\r\n              console.log(\"not over anything\");\r\n            }\r\n          }}\r\n          data={this.state.plot_points}\r\n        />\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nexport default RadarPlot;\r\n"]},"metadata":{},"sourceType":"module"}